// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: internal/proto/wireguard.proto

package gen_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Wireguard_Connect_FullMethodName          = "/stores.Wireguard/Connect"
	Wireguard_AddConfig_FullMethodName        = "/stores.Wireguard/AddConfig"
	Wireguard_GetConfigID_FullMethodName      = "/stores.Wireguard/GetConfigID"
	Wireguard_GetConfig_FullMethodName        = "/stores.Wireguard/GetConfig"
	Wireguard_GetAllConfigs_FullMethodName    = "/stores.Wireguard/GetAllConfigs"
	Wireguard_GetConfigsAmount_FullMethodName = "/stores.Wireguard/GetConfigsAmount"
	Wireguard_DisableConfig_FullMethodName    = "/stores.Wireguard/DisableConfig"
	Wireguard_EnableConfig_FullMethodName     = "/stores.Wireguard/EnableConfig"
	Wireguard_DeleteConfig_FullMethodName     = "/stores.Wireguard/DeleteConfig"
	Wireguard_GetQR_FullMethodName            = "/stores.Wireguard/GetQR"
)

// WireguardClient is the client API for Wireguard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WireguardClient interface {
	Connect(ctx context.Context, in *ConnectResponse, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddConfig(ctx context.Context, in *ConfigName, opts ...grpc.CallOption) (*AddConfigResponse, error)
	GetConfigID(ctx context.Context, in *ConfigAddress, opts ...grpc.CallOption) (*ConfigIdResponse, error)
	GetConfig(ctx context.Context, in *ConfigID, opts ...grpc.CallOption) (*ConfigText, error)
	GetAllConfigs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllConfigsResponse, error)
	GetConfigsAmount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConfigAmount, error)
	DisableConfig(ctx context.Context, in *ConfigID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EnableConfig(ctx context.Context, in *ConfigID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteConfig(ctx context.Context, in *ConfigID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetQR(ctx context.Context, in *ConfigID, opts ...grpc.CallOption) (*QRCode, error)
}

type wireguardClient struct {
	cc grpc.ClientConnInterface
}

func NewWireguardClient(cc grpc.ClientConnInterface) WireguardClient {
	return &wireguardClient{cc}
}

func (c *wireguardClient) Connect(ctx context.Context, in *ConnectResponse, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Wireguard_Connect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireguardClient) AddConfig(ctx context.Context, in *ConfigName, opts ...grpc.CallOption) (*AddConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddConfigResponse)
	err := c.cc.Invoke(ctx, Wireguard_AddConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireguardClient) GetConfigID(ctx context.Context, in *ConfigAddress, opts ...grpc.CallOption) (*ConfigIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigIdResponse)
	err := c.cc.Invoke(ctx, Wireguard_GetConfigID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireguardClient) GetConfig(ctx context.Context, in *ConfigID, opts ...grpc.CallOption) (*ConfigText, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigText)
	err := c.cc.Invoke(ctx, Wireguard_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireguardClient) GetAllConfigs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllConfigsResponse)
	err := c.cc.Invoke(ctx, Wireguard_GetAllConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireguardClient) GetConfigsAmount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConfigAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigAmount)
	err := c.cc.Invoke(ctx, Wireguard_GetConfigsAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireguardClient) DisableConfig(ctx context.Context, in *ConfigID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Wireguard_DisableConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireguardClient) EnableConfig(ctx context.Context, in *ConfigID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Wireguard_EnableConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireguardClient) DeleteConfig(ctx context.Context, in *ConfigID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Wireguard_DeleteConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireguardClient) GetQR(ctx context.Context, in *ConfigID, opts ...grpc.CallOption) (*QRCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QRCode)
	err := c.cc.Invoke(ctx, Wireguard_GetQR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WireguardServer is the server API for Wireguard service.
// All implementations must embed UnimplementedWireguardServer
// for forward compatibility.
type WireguardServer interface {
	Connect(context.Context, *ConnectResponse) (*emptypb.Empty, error)
	AddConfig(context.Context, *ConfigName) (*AddConfigResponse, error)
	GetConfigID(context.Context, *ConfigAddress) (*ConfigIdResponse, error)
	GetConfig(context.Context, *ConfigID) (*ConfigText, error)
	GetAllConfigs(context.Context, *emptypb.Empty) (*GetAllConfigsResponse, error)
	GetConfigsAmount(context.Context, *emptypb.Empty) (*ConfigAmount, error)
	DisableConfig(context.Context, *ConfigID) (*emptypb.Empty, error)
	EnableConfig(context.Context, *ConfigID) (*emptypb.Empty, error)
	DeleteConfig(context.Context, *ConfigID) (*emptypb.Empty, error)
	GetQR(context.Context, *ConfigID) (*QRCode, error)
	mustEmbedUnimplementedWireguardServer()
}

// UnimplementedWireguardServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWireguardServer struct{}

func (UnimplementedWireguardServer) Connect(context.Context, *ConnectResponse) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedWireguardServer) AddConfig(context.Context, *ConfigName) (*AddConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConfig not implemented")
}
func (UnimplementedWireguardServer) GetConfigID(context.Context, *ConfigAddress) (*ConfigIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigID not implemented")
}
func (UnimplementedWireguardServer) GetConfig(context.Context, *ConfigID) (*ConfigText, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedWireguardServer) GetAllConfigs(context.Context, *emptypb.Empty) (*GetAllConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllConfigs not implemented")
}
func (UnimplementedWireguardServer) GetConfigsAmount(context.Context, *emptypb.Empty) (*ConfigAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigsAmount not implemented")
}
func (UnimplementedWireguardServer) DisableConfig(context.Context, *ConfigID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableConfig not implemented")
}
func (UnimplementedWireguardServer) EnableConfig(context.Context, *ConfigID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableConfig not implemented")
}
func (UnimplementedWireguardServer) DeleteConfig(context.Context, *ConfigID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (UnimplementedWireguardServer) GetQR(context.Context, *ConfigID) (*QRCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQR not implemented")
}
func (UnimplementedWireguardServer) mustEmbedUnimplementedWireguardServer() {}
func (UnimplementedWireguardServer) testEmbeddedByValue()                   {}

// UnsafeWireguardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WireguardServer will
// result in compilation errors.
type UnsafeWireguardServer interface {
	mustEmbedUnimplementedWireguardServer()
}

func RegisterWireguardServer(s grpc.ServiceRegistrar, srv WireguardServer) {
	// If the following call pancis, it indicates UnimplementedWireguardServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Wireguard_ServiceDesc, srv)
}

func _Wireguard_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireguardServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wireguard_Connect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireguardServer).Connect(ctx, req.(*ConnectResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wireguard_AddConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireguardServer).AddConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wireguard_AddConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireguardServer).AddConfig(ctx, req.(*ConfigName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wireguard_GetConfigID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireguardServer).GetConfigID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wireguard_GetConfigID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireguardServer).GetConfigID(ctx, req.(*ConfigAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wireguard_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireguardServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wireguard_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireguardServer).GetConfig(ctx, req.(*ConfigID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wireguard_GetAllConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireguardServer).GetAllConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wireguard_GetAllConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireguardServer).GetAllConfigs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wireguard_GetConfigsAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireguardServer).GetConfigsAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wireguard_GetConfigsAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireguardServer).GetConfigsAmount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wireguard_DisableConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireguardServer).DisableConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wireguard_DisableConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireguardServer).DisableConfig(ctx, req.(*ConfigID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wireguard_EnableConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireguardServer).EnableConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wireguard_EnableConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireguardServer).EnableConfig(ctx, req.(*ConfigID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wireguard_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireguardServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wireguard_DeleteConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireguardServer).DeleteConfig(ctx, req.(*ConfigID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wireguard_GetQR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireguardServer).GetQR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wireguard_GetQR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireguardServer).GetQR(ctx, req.(*ConfigID))
	}
	return interceptor(ctx, in, info, handler)
}

// Wireguard_ServiceDesc is the grpc.ServiceDesc for Wireguard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wireguard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stores.Wireguard",
	HandlerType: (*WireguardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Wireguard_Connect_Handler,
		},
		{
			MethodName: "AddConfig",
			Handler:    _Wireguard_AddConfig_Handler,
		},
		{
			MethodName: "GetConfigID",
			Handler:    _Wireguard_GetConfigID_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Wireguard_GetConfig_Handler,
		},
		{
			MethodName: "GetAllConfigs",
			Handler:    _Wireguard_GetAllConfigs_Handler,
		},
		{
			MethodName: "GetConfigsAmount",
			Handler:    _Wireguard_GetConfigsAmount_Handler,
		},
		{
			MethodName: "DisableConfig",
			Handler:    _Wireguard_DisableConfig_Handler,
		},
		{
			MethodName: "EnableConfig",
			Handler:    _Wireguard_EnableConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _Wireguard_DeleteConfig_Handler,
		},
		{
			MethodName: "GetQR",
			Handler:    _Wireguard_GetQR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/wireguard.proto",
}
